plot(students$score, students$schoolsup, pch = 21, bg = colores, cex=1.3,font=2,
xlab = "Nota media", ylab = "Ayuda escolar", font.lab=2, )
legend("left", c("No ayuda", "Ayuda escolar"), pch = 21,
pt.bg = c("red", "blue"))
box(lwd=3)
colores = c()
colores[students$schoolsup == "yes"] = "red"
colores[students$schoolsup == "no"] = "blue"
plot(students$score, students$schoolsup, pch = 21, bg = colores, cex=1.3,font=2,
xlab = "Nota media", ylab = "Ayuda escolar", font.lab=2, )
legend("left", c("No ayuda", "Ayuda escolar"), pch = 21,
pt.bg = c("red", "blue"))
box(lwd=3)
colores = c()
colores[students$higher == "yes"] = "red"
colores[students$higher == "no"] = "blue"
plot(students$score, students$higher, pch = 21, bg = colores, cex=1.3,font=2,
xlab = "Nota media", ylab = "Sí estudios superiores", font.lab=2, )
legend("left", c("No estudios superiores", "Sí estudios superiores"), pch = 21,
pt.bg = c("red", "blue"))
box(lwd=3)
modelo <- glm(schoolsup ~ score, data = students, family = "binomial")
summary(modelo)
par(mfrow=c(2,2))
ggplot(data = students, aes(x = sex, y = score, color = sex)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = schoolsup, y = score, color = schoolsup)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = famsup, y = score, color = famsup)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = higher, y = score, color = higher)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
m1 <- glm(sex ~ score, data = students, family = "binomial")
summary(m1)
m2 <- glm(schoolsup ~ score, data = students, family = "binomial")
summary(m2)
m3 <- glm(famsup ~ score, data = students, family = "binomial")
summary(m3)
m4 <- glm(higher ~ score, data = students, family = "binomial")
summary(m4)
par(mfrow=c(2,2))
ggplot(data = students, aes(x = sex, y = score, color = sex)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = schoolsup, y = score, color = schoolsup)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = famsup, y = score, color = famsup)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = studytime, y = score, color = students.studytime)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
par(mfrow=c(2,2))
ggplot(data = students, aes(x = sex, y = score, color = sex)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = schoolsup, y = score, color = schoolsup)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = famsup, y = score, color = famsup)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = studytime, y = score, color = studytime)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = higher, y = score, color = higher)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
m1 <- glm(sex ~ score, data = students, family = "binomial")
summary(m1)
m2 <- glm(schoolsup ~ score, data = students, family = "binomial")
summary(m2)
m3 <- glm(famsup ~ score, data = students, family = "binomial")
summary(m3)
m3 <- glm(students.studytime ~ score, data = students, family = "binomial")
t.test(students.nostudytime$score, students.studytime$score, alternative = "less")
par(mfrow=c(2,2))
ggplot(data = students, aes(x = sex, y = score, color = sex)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = schoolsup, y = score, color = schoolsup)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = famsup, y = score, color = famsup)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = higher, y = score, color = higher)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
m1 <- glm(sex ~ score, data = students, family = "binomial")
summary(m1)
m2 <- glm(schoolsup ~ score, data = students, family = "binomial")
summary(m2)
m3 <- glm(famsup ~ score, data = students, family = "binomial")
summary(m3)
m4 <- glm(higher ~ score, data = students, family = "binomial")
summary(m4)
fligner.test(score ~ paid, data = students)
fligner.test(score ~ schoolsup, data = students)
leveneTest(score ~ schoolsup, data = students)
fligner.test(score ~ famsup, data = students)
a <- students[students$age < 16,"score"]
b <- students[students$age >= 16,"score"]
fligner.test(x = list(a,b))
# https://rpubs.com/Joaquin_AR/223351
cor.test(x = students$G1,
y = log10(students$G2),
alternative = "two.sided",
conf.level  = 0.95,
method      = "spearman")
cor.test(x = students$G1,
y = log10(students$G3),
alternative = "two.sided",
conf.level  = 0.95,
method      = "spearman")
cor.test(x = students$G1,
y = log10(students$score),
alternative = "two.sided",
conf.level  = 0.95,
method      = "spearman")
cor.test(x = students$G2,
y = log10(students$G3),
alternative = "two.sided",
conf.level  = 0.95,
method      = "spearman")
cor.test(x = students$G2,
y = log10(students$score),
alternative = "two.sided",
conf.level  = 0.95,
method      = "spearman")
cor.test(x = students$G3,
y = log10(students$score),
alternative = "two.sided",
conf.level  = 0.95,
method      = "spearman")
par(mfrow=c(2,2))
ggplot(data = students, aes(x = sex, y = score, color = sex)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = schoolsup, y = score, color = schoolsup)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = famsup, y = score, color = famsup)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = higher, y = score, color = higher)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
m1 <- glm(sex ~ score, data = students, family = "binomial")
summary(m1)
m2 <- glm(schoolsup ~ score, data = students, family = "binomial")
summary(m2)
m3 <- glm(famsup ~ score, data = students, family = "binomial")
summary(m3)
m4 <- glm(higher ~ score, data = students, family = "binomial")
summary(m4)
install.packages("DescTools")
knitr::opts_chunk$set(eval=T, echo=T)
library(knitr)
library(lubridate)
library(stringr)
library(dplyr)
library(ggplot2)
library(grid)
library(gridExtra)
library(plyr)
library(cowplot)
library(colorspace)
library(mlbench)
library(caret)
library(car)
library(DescTools)
sMat=read.table("data/student-mat.csv",sep=",",header=TRUE)
sPor=read.table("data/student-por.csv",sep=",",header=TRUE)
# Según el propietario de los datos, los alumnos que están presentes en ambas asignaturas
# pueden ser identificados por los siguientes atributos
sBoth=merge(sMat,sPor,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
# school, sex, age, address, famsize, Pstatus, Medu, Fedu, Mjob, Fjob, reason, nursery, internet
# traveltime, studytime, failures, schoolsup, famsup, paid, activities, higher, romantic, famrel
# freetime, goout, Dalc, Walc, health, absences, subject
sMat$id = paste(sMat$school,sMat$sex,sMat$age,sMat$address,sMat$famsize,sMat$Pstatus,sMat$Medu,sMat$Fedu,sMat$Mjob,sMat$Fjob,sMat$reason,sMat$nursery,sMat$internet, sep="-")
sPor$id = paste(sPor$school,sPor$sex,sPor$age,sPor$address,sPor$famsize,sPor$Pstatus,sPor$Medu,sPor$Fedu,sPor$Mjob,sPor$Fjob,sPor$reason,sPor$nursery,sPor$internet, sep="-")
sMat$score = rowMeans(subset(sMat, select = c(G1, G2, G3)), na.rm = TRUE)
sMat$mark<-sMat$score
sMat$mark[sMat$score<10] <- "fail"
sMat$mark[sMat$score>=10] <- "pass"
sMat$mark <- as.factor(sMat$mark)
sMat$calification <- sMat$score
sMat$calification[(sMat$score<=20) & (sMat$score>=16)] <- "A"
sMat$calification[(sMat$score<16) & (sMat$score>=14)] <- "B"
sMat$calification[sMat$score<14 & sMat$score>=12] <- "C"
sMat$calification[sMat$score<12 & sMat$score>=10] <- "D"
sMat$calification[sMat$score<10] <- "F"
sMat$calification <- as.factor(sMat$calification)
sPor$score = rowMeans(subset(sPor, select = c(G1, G2, G3)), na.rm = TRUE)
sPor$mark<-sPor$score
sPor$mark[sPor$score<10] <- "fail"
sPor$mark[sPor$score>=10] <- "pass"
sPor$mark <- as.factor(sPor$mark)
sPor$calification <- sPor$score
sPor$calification[(sPor$score<=20) & (sPor$score>=16)] <- "A"
sPor$calification[(sPor$score<16) & (sPor$score>=14)] <- "B"
sPor$calification[sPor$score<14 & sPor$score>=12] <- "C"
sPor$calification[sPor$score<12 & sPor$score>=10] <- "D"
sPor$calification[sPor$score<10] <- "F"
sPor$calification <- as.factor(sPor$calification)
sMat$subject = 'Math'
sPor$subject = 'Portuguese'
students = rbind(sMat,sPor)
students$subject = as.factor(students$subject)
students = transform(students, id=as.numeric(factor(id)))
students$id = as.factor(students$id)
# Resumen
glimpse(students)
nro_factors = 0
nro_numeric = 0
for (i in 1:ncol(students)) {
if (is.factor(students[,i])) nro_factors=nro_factors+1 else nro_numeric=nro_numeric+1
}
# Estadísticas básicas
summary(students)
# Con datos nulos
colSums(is.na(students))
# Con datos ""
colSums(students=="")
colSums(students==0)
# Valores unicos
apply(students,2, function(x) length(unique(x)))
par(mfrow=c(1,3))
for(i in 1:ncol(students)) {
if (is.numeric(students[,i])){
boxplot(students[,i], main = colnames(students)[i], width = 100)
}
}
length(boxplot.stats(students[,c("traveltime")])$out)
students = students[students$traveltime<=3,]
students[students$freetime==1,]
table(students$famrel)
students$famrel[students$famrel == 1] <- 4
length(boxplot.stats(students[,c("Dalc")])$out)
length(boxplot.stats(students[,c("absences")])$out)
boxplot.stats(students[,c("absences")])$out
students[students$absences>=40,]
students[students$absences>=40,]
students = students[students$absences<40,]
glimpse(students)
# Agrupación por sexo de los estudiantes
students.male <- students[students$sex == "M",]
students.female <- students[students$sex == "F",]
# Agrupación por si reciben clases particules pagadas o no
students.paid <- students[students$paid == "yes",]
students.nopaid <- students[students$paid == "no",]
# Agrupación por si reciben soporte por parte de la familia
students.famsup <- students[students$famsup == "yes",]
students.nofamsup <- students[students$famsup == "no",]
# Agrupación por si reciben ayuda extra escolar
students.schoolsup <- students[students$schoolsup == "yes",]
students.noschoolsup <- students[students$schoolsup == "no",]
# Agrupación por tiempo dedicado al estudio
students.studytime <- students[students$studytime >= 3,]
students.nostudytime <- students[students$studytime < 3,]
# Agrupación por estudios de los padres
students.parentedu <- students[(students$Medu >= 3) | (students$Fedu >= 3),]
students.parentnoedu <- students[(students$Medu < 3) & (students$Fedu < 3),]
# Agrupación por edad
students.mayores <- students[students$age >= 16,]
students.menores <- students[students$age < 16,]
fig1 = ggplot(students,aes(x=sex,fill=calification))+geom_bar(position="fill")+ylab("Porcentaje")
fig2 = ggplot(students,aes(x=sex,fill=calification))+geom_bar()+ylab("Frecuencia")
grid.arrange(fig1, fig2, ncol=2)
fig1 = ggplot(students,aes(x=studytime,fill=calification))+geom_bar(position="fill")+ylab("Porcentaje")
fig2 = ggplot(students,aes(x=studytime,fill=calification))+geom_bar()+ylab("Frecuencia")
grid.arrange(fig1, fig2, ncol=2)
fig1 = ggplot(students,aes(x=studytime,fill=calification))+geom_bar(position="fill")+ylab("Porcentaje")+facet_wrap(~sex )
fig2 = ggplot(students,aes(x=studytime,fill=calification))+geom_bar()+ylab("Frecuencia")+facet_wrap(~sex )
grid.arrange(fig1, fig2, ncol=2)
fig1 = ggplot(students,aes(x=schoolsup,fill=calification))+geom_bar(position="fill")+ylab("Porcentaje")
fig2 = ggplot(students,aes(x=schoolsup,fill=calification))+geom_bar()+ylab("Frecuencia")
grid.arrange(fig1, fig2, ncol=2)
fig1 = ggplot(students,aes(x=schoolsup,fill=calification))+geom_bar(position="fill")+ylab("Porcentaje")+facet_wrap(~sex )
fig2 = ggplot(students,aes(x=schoolsup,fill=calification))+geom_bar()+ylab("Frecuencia")+facet_wrap(~sex )
grid.arrange(fig1, fig2, ncol=2)
fig1 = ggplot(students,aes(x=paid,fill=calification))+geom_bar(position="fill")+ylab("Porcentaje")
fig2 = ggplot(students,aes(x=paid,fill=calification))+geom_bar()+ylab("Frecuencia")
grid.arrange(fig1, fig2, ncol=2)
fig1 = ggplot(students,aes(x=paid,fill=calification))+geom_bar(position="fill")+ylab("Porcentaje")+facet_wrap(~sex )
fig2 = ggplot(students,aes(x=paid,fill=calification))+geom_bar()+ylab("Frecuencia")+facet_wrap(~sex )
grid.arrange(fig1, fig2, ncol=2)
fig1 = ggplot(students,aes(x=famsup,fill=calification))+geom_bar(position="fill")+ylab("Porcentaje")
fig2 = ggplot(students,aes(x=famsup,fill=calification))+geom_bar()+ylab("Frecuencia")
grid.arrange(fig1, fig2, ncol=2)
fig1 = ggplot(students,aes(x=famsup,fill=calification))+geom_bar(position="fill")+ylab("Porcentaje")+facet_wrap(~sex )
fig2 = ggplot(students,aes(x=famsup,fill=calification))+geom_bar()+ylab("Frecuencia")+facet_wrap(~sex )
grid.arrange(fig1, fig2, ncol=2)
# Tests de normalidad
library(nortest)
# Función que aplica distintos test de homogeneidad sobre los datos de entrada
normTest <- function(data, name, alpha = 0.05) {
ad_val = (ad.test(data)$p.value > alpha) # Anderson-Darling test
ks_val = (ks.test(data, pnorm, mean(data), sd(data))$p.value > alpha) # Kolmogorov-Smirnov test
sh_val = (shapiro.test(data)$p.value > alpha) # Shapiro test
csv_val = (cvm.test(data)$p.value > alpha) # Cramer-von Mises test
cat(name)
cat("\t")
cat(ad_val,ks_val,sh_val,csv_val,"\t")
cat("\n")
}
col.names = colnames(students)
cat("Distribucion normal: \n")
for (i in 1:ncol(students)) {
if (is.integer(students[,i]) | is.numeric(students[,i])) {
normTest(students[,i], col.names[i])
}
}
normTest(students.female[,c("score")], "score~female")
normTest(students.male[,c("score")], "score~male")
normTest(students.studytime[,c("score")], "score~studytime")
normTest(students.nostudytime[,c("score")], "score~nostudytime")
normTest(students.mayores[,c("score")], "score~mayores")
normTest(students.menores[,c("score")], "score~menores")
normTest(students.paid[,c("score")], "score~paid")
normTest(students.nopaid[,c("score")], "score~nopaid")
normTest(students.schoolsup[,c("score")], "score~schoolsup")
normTest(students.noschoolsup[,c("score")], "score~noschoolsup")
normTest(students.famsup[,c("score")], "score~famsup")
normTest(students.nofamsup[,c("score")], "score~nofamsup")
fligner.test(score ~ sex, data = students)
leveneTest(studytime ~ sex, data = students)
fligner.test(score ~ paid, data = students)
leveneTest(score ~ paid, data = students)
fligner.test(score ~ schoolsup, data = students)
leveneTest(score ~ schoolsup, data = students)
fligner.test(score ~ famsup, data = students)
a <- students[students$age < 16,"score"]
b <- students[students$age >= 16,"score"]
fligner.test(x = list(a,b))
a <- students[students$studytime < 3,"score"]
b <- students[students$studytime >= 3,"score"]
fligner.test(x = list(a,b))
plotNormHistogram <- function(data, name) {
qqnorm(data,main = paste("Normal Q-Q Plot for ",name))
qqline(data,col="red")
hist(data,
main=paste("Histogram for ", name),
xlab=name, freq = FALSE)
}
par(mfrow=c(2,2))
for(i in 1:ncol(students)) {
if (is.numeric(students[,i])){
plotNormHistogram(students[,i], colnames(students)[i])
}
}
par(mfrow=c(2,2))
plotNormHistogram(students.female[,c("score")], "score~sex")
plotNormHistogram(students.male[,c("score")], "score~sex")
plotNormHistogram(students.studytime[,c("score")], "score~studytime")
plotNormHistogram(students.nostudytime[,c("score")], "score~studytime")
plotNormHistogram(students.mayores[,c("score")], "score~mayores")
plotNormHistogram(students.menores[,c("score")], "score~menores")
color=diverge_hcl(length(students$calification))[rank(students$calification)]
pairs(~ G1 + G2 + G3 + score, data = students, pch = 19, cex = 0.5, lower.panel = NULL, col = color)
title("Correlación notas")
cor(x = students$G1, y = log10(students$G2), method = "spearman")
cor(x = students$G1, y = log10(students$G3), method = "spearman")
cor(x = students$G1, y = log10(students$score), method = "spearman")
cor(x = students$G2, y = log10(students$G3), method = "spearman")
cor(x = students$G2, y = log10(students$score), method = "spearman")
cor(x = students$G3, y = log10(students$score), method = "spearman")
# https://rpubs.com/Joaquin_AR/223351
cor.test(x = students$G1,
y = log10(students$G2),
alternative = "two.sided",
conf.level  = 0.95,
method      = "spearman")
cor.test(x = students$G1,
y = log10(students$G3),
alternative = "two.sided",
conf.level  = 0.95,
method      = "spearman")
cor.test(x = students$G1,
y = log10(students$score),
alternative = "two.sided",
conf.level  = 0.95,
method      = "spearman")
cor.test(x = students$G2,
y = log10(students$G3),
alternative = "two.sided",
conf.level  = 0.95,
method      = "spearman")
cor.test(x = students$G2,
y = log10(students$score),
alternative = "two.sided",
conf.level  = 0.95,
method      = "spearman")
cor.test(x = students$G3,
y = log10(students$score),
alternative = "two.sided",
conf.level  = 0.95,
method      = "spearman")
wilcox.test(score ~ sex, data = students)
students$studytime2g<-students$studytime
students$studytime2g[students$studytime<3] <- "few"
students$studytime2g[students$studytime>=3] <- "many"
students$studytime2g <- as.factor(students$studytime2g)
wilcox.test(score ~ studytime2g, data = students)
wilcox.test(score ~ studytime, data = students, subset = studytime %in% c(3, 4))
wilcox.test(score ~ paid, data = students)
wilcox.test(score ~ schoolsup, data = students)
wilcox.test(score ~ famsup, data = students)
sample_size = floor(0.90*nrow(students)) # 90% train - 10% test
train_idx = sample(seq_len(nrow(students)),size = sample_size)
train = students[train_idx,]
test = students[-train_idx,]
# Generación de varios modelos
modelo1 <- lm(score ~ G1 + G2 + G3, data = train)
modelo2 <- lm(score ~ G1 + G2, data = train)
modelo3 <- lm(score ~ G1 + G3, data = train)
modelo4 <- lm(score ~ G1, data = train)
modelo5 <- lm(score ~ G2, data = train)
modelo6 <- lm(score ~ G3, data = train)
modelo7 <- lm(score ~ G1 + G3 + studytime, data = train)
modelo8 <- lm(score ~ G2 + studytime + schoolsup, data = train)
modelo9 <- lm(score ~ studytime + sex + absences, data = train)
modelo10 <- lm(score ~ studytime + paid, data = train)
tabla.coeficientes <- matrix(
c(1, summary(modelo1)$r.squared,
2, summary(modelo2)$r.squared,
3, summary(modelo3)$r.squared,
4, summary(modelo4)$r.squared,
5, summary(modelo5)$r.squared,
6, summary(modelo6)$r.squared,
7, summary(modelo7)$r.squared,
8, summary(modelo8)$r.squared,
9, summary(modelo9)$r.squared,
10, summary(modelo10)$r.squared),
ncol = 2, byrow = TRUE)
colnames(tabla.coeficientes) <- c("Modelo", "R^2")
tabla.coeficientes
y_predict = predict(modelo8, test)
data = data.frame(G2=test$score, pred=y_predict, se=abs(y_predict - test$score))
data$sample <- seq.int(nrow(data))
ggplot(data, aes(x=sample, y=pred)) +
geom_errorbar(aes(ymin=pred-se, ymax=pred+se)) +
geom_point()
par(mfrow=c(2,2))
ggplot(data = students, aes(x = sex, y = score, color = sex)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = schoolsup, y = score, color = schoolsup)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = famsup, y = score, color = famsup)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")
ggplot(data = students, aes(x = higher, y = score, color = higher)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.1) +
theme_bw() +
theme(legend.position = "null")

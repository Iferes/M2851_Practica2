modelo3 <- lm(score ~ G1 + G2 + G3, data = x_train)
modelo4 <- lm(score ~ G1 + G3, data = x_train)
modelo5 <- lm(score ~ G1 + G3 + studytime, data = x_train)
modelo6 <- lm(score ~ studytime + sex + absences, data = x_train)
modelo7 <- lm(score ~ studytime + paid, data = x_train)
# Generación de varios modelos
modelo1 <- lm(score ~ G1, data = x_train)
modelo2 <- lm(score ~ G1 + G2, data = x_train)
modelo3 <- lm(score ~ G1 + G2 + G3, data = x_train)
modelo4 <- lm(score ~ G1 + G3, data = x_train)
modelo5 <- lm(score ~ G1 + G3 + studytime, data = x_train)
modelo6 <- lm(score ~ studytime + sex + absences, data = x_train)
modelo7 <- lm(score ~ studytime + paid, data = x_train)
tabla.coeficientes <- matrix(
c(1, summary(modelo1)$r.squared,
2, summary(modelo2)$r.squared,
3, summary(modelo3)$r.squared,
4, summary(modelo4)$r.squared,
5, summary(modelo5)$r.squared,
6, summary(modelo6)$r.squared,
7, summary(modelo7)$r.squared),
ncol = 2, byrow = TRUE)
colnames(tabla.coeficientes) <- c("Modelo", "R^2")
tabla.coeficientes
# Generación de varios modelos
modelo1 <- lm(score ~ G1, data = x_train)
modelo2 <- lm(score ~ G1 + G2, data = x_train)
modelo3 <- lm(score ~ G1 + G2 + G3, data = x_train)
modelo4 <- lm(score ~ G1 + G3, data = x_train)
modelo5 <- lm(score ~ G1 + G3 + studytime, data = x_train)
modelo6 <- lm(score ~ studytime + sex + absences, data = x_train)
modelo7 <- lm(score ~ studytime + paid, data = x_train)
modelo8 <- lm(score ~ G1 + G3 + studytime + paid, data = x_train)
tabla.coeficientes <- matrix(
c(1, summary(modelo1)$r.squared,
2, summary(modelo2)$r.squared,
3, summary(modelo3)$r.squared,
4, summary(modelo4)$r.squared,
5, summary(modelo5)$r.squared,
6, summary(modelo6)$r.squared,
7, summary(modelo7)$r.squared,
8, summary(modelo8)$r.squared),
ncol = 2, byrow = TRUE)
colnames(tabla.coeficientes) <- c("Modelo", "R^2")
tabla.coeficientes
y_predict = predict(modelo8, x_test)
confusionMatrix(y_predict$class, y_test)
y_predict = predict(modelo8, x_test)
confusionMatrix(y_predict, y_test)
# Generación de varios modelos
modelo1 <- lm(mark ~ G1, data = x_train)
# Generación de varios modelos
modelo1 <- lm(mark ~ G1, data = train)
modelo2 <- lm(mark ~ G1 + G2, data = train)
modelo3 <- lm(mark ~ G1 + G2 + G3, data = train)
modelo4 <- lm(mark ~ G1 + G3, data = train)
modelo5 <- lm(mark ~ G1 + G3 + studytime, data = train)
modelo6 <- lm(mark ~ studytime + sex + absences, data = train)
modelo7 <- lm(mark ~ studytime + paid, data = train)
modelo8 <- lm(mark ~ G1 + G3 + studytime + paid, data = train)
tabla.coeficientes <- matrix(
c(1, summary(modelo1)$r.squared,
2, summary(modelo2)$r.squared,
3, summary(modelo3)$r.squared,
4, summary(modelo4)$r.squared,
5, summary(modelo5)$r.squared,
6, summary(modelo6)$r.squared,
7, summary(modelo7)$r.squared,
8, summary(modelo8)$r.squared),
ncol = 2, byrow = TRUE)
colnames(tabla.coeficientes) <- c("Modelo", "R^2")
tabla.coeficientes
# Generación de varios modelos
modelo1 <- lm(score ~ G1, data = train)
modelo2 <- lm(score ~ G1 + G2, data = train)
modelo3 <- lm(score ~ G1 + G2 + G3, data = train)
modelo4 <- lm(score ~ G1 + G3, data = train)
modelo5 <- lm(score ~ G1 + G3 + studytime, data = train)
modelo6 <- lm(score ~ studytime + sex + absences, data = train)
modelo7 <- lm(score ~ studytime + paid, data = train)
modelo8 <- lm(score ~ G1 + G3 + studytime + paid, data = train)
tabla.coeficientes <- matrix(
c(1, summary(modelo1)$r.squared,
2, summary(modelo2)$r.squared,
3, summary(modelo3)$r.squared,
4, summary(modelo4)$r.squared,
5, summary(modelo5)$r.squared,
6, summary(modelo6)$r.squared,
7, summary(modelo7)$r.squared,
8, summary(modelo8)$r.squared),
ncol = 2, byrow = TRUE)
colnames(tabla.coeficientes) <- c("Modelo", "R^2")
tabla.coeficientes
y_predict = predict(modelo8, test)
confusionMatrix(y_predict, y_test)
View(y_predict)
y_predict = predict(modelo8, test)
confusionMatrix(y_predict, test$score)
View(test$score)
y_predict = predict(modelo8, test)
confusionMatrix(y_predict, test$score)
# Generación de varios modelos
modelo1 <- lm(mark ~ G1, data = train)
modelo2 <- lm(mark ~ G1 + G2, data = train)
modelo3 <- lm(mark ~ G1 + G2 + G3, data = train)
modelo4 <- lm(mark ~ G1 + G3, data = train)
modelo5 <- lm(mark ~ G1 + G3 + studytime, data = train)
modelo6 <- lm(mark ~ studytime + sex + absences, data = train)
modelo7 <- lm(mark ~ studytime + paid, data = train)
modelo8 <- lm(mark ~ G1 + G3 + studytime + paid, data = train)
tabla.coeficientes <- matrix(
c(1, summary(modelo1)$r.squared,
2, summary(modelo2)$r.squared,
3, summary(modelo3)$r.squared,
4, summary(modelo4)$r.squared,
5, summary(modelo5)$r.squared,
6, summary(modelo6)$r.squared,
7, summary(modelo7)$r.squared,
8, summary(modelo8)$r.squared),
ncol = 2, byrow = TRUE)
colnames(tabla.coeficientes) <- c("Modelo", "R^2")
tabla.coeficientes
y_predict = predict(modelo8, test)
confusionMatrix(y_predict, test$mark)
summary(modelo1)
# Generación de varios modelos
modelo1 <- lm(score ~ G1, data = train)
modelo2 <- lm(score ~ G1 + G2, data = train)
modelo3 <- lm(score ~ G1 + G2 + G3, data = train)
modelo4 <- lm(score ~ G1 + G3, data = train)
modelo5 <- lm(score ~ G1 + G3 + studytime, data = train)
modelo6 <- lm(score ~ studytime + sex + absences, data = train)
modelo7 <- lm(score ~ studytime + paid, data = train)
modelo8 <- lm(score ~ G1 + G3 + studytime + paid, data = train)
tabla.coeficientes <- matrix(
c(1, summary(modelo1)$r.squared,
2, summary(modelo2)$r.squared,
3, summary(modelo3)$r.squared,
4, summary(modelo4)$r.squared,
5, summary(modelo5)$r.squared,
6, summary(modelo6)$r.squared,
7, summary(modelo7)$r.squared,
8, summary(modelo8)$r.squared),
ncol = 2, byrow = TRUE)
colnames(tabla.coeficientes) <- c("Modelo", "R^2")
tabla.coeficientes
summary(modelo1)
y_predict = predict(modelo8, test)
View(y_predict)
View(test)
View(y_predict)
View(y_test)
plot(test$score)
plot(test$score)
plot(y_predict, add = TRUE)
y_predict = predict(modelo3, test)
plot(test$score)
plot(y_predict, add = TRUE)
plot(test$score, ylim = range(0,270))
points(y_predict, col = "blue")
plot(test$score, ylim = range(0,15))
points(y_predict, col = "blue")
plot(test$score, col = "green", ylim = range(0,15))
points(y_predict, col = "blue")
y_predict = predict(modelo8, test)
y_predict = predict(modelo8, test)
plot(test$score, col = "green", ylim = range(0,15))
points(y_predict, col = "blue")
plot(test$score, col = "green", xlab = "", ylab = "", ylim = range(0,15))
points(y_predict, col = "blue")
plot(test$score, col = "green", xlab = "", ylab = "", ylim = range(0,15))
points(y_predict, col = "blue")
legend(-1, 1.9, c("sin", "cos", "tan"), col = c(3, 4, 6),
text.col = "green4", lty = c(2, -1, 1), pch = c(NA, 3, 4),
merge = TRUE, bg = "gray90")
plot(test$score, col = "green", xlab = "", ylab = "", ylim = range(0,15))
points(y_predict, col = "blue")
legend( c("real", "predicted"), col = c(3, 4),
ty = c(2, -1, 1), pch = c(3, 4),
merge = TRUE)
plot(test$score, col = "green", xlab = "", ylab = "", ylim = range(0,15))
points(y_predict, col = "blue")
legend( c("real", "predicted"), col = c(3, 4),
ty = c(2, 1), pch = c(3, 4),
merge = TRUE)
plot(test$score, col = "green", xlab = "", ylab = "", ylim = range(0,15))
points(y_predict, col = "blue")
legend( c("real", "predicted"), col = c(3, 4), pch = c(3, 4),
merge = TRUE)
plot(test$score, col = "green", xlab = "", ylab = "", ylim = range(0,15))
points(y_predict, col = "blue")
legend("right", leg.txt, pch = "sSvV", col = c(1, 3),
cex = 1+(-1:2)/8, trace = TRUE)
plot(test$score, col = "green", xlab = "", ylab = "", ylim = range(0,15))
points(y_predict, col = "blue")
legend("right", c("", ""), pch = "sSvV", col = c(1, 3),
cex = 1+(-1:2)/8, trace = TRUE)
plot(test$score, col = "green", xlab = "", ylab = "", ylim = range(0,15))
points(y_predict, col = "blue")
legend("right", c("", ""), pch = "sSvV", col = c("green", "blue"),
cex = 1+(-1:2)/8, trace = TRUE)
plot(test$score, col = "green", xlab = "", ylab = "", ylim = range(0,15))
points(y_predict, col = "blue")
legend("right", c("real", "predicted"), pch = "sSvV", col = c("green", "blue"),
cex = 1+(-1:2)/8, trace = TRUE)
plot(test$score, col = "green", xlab = "", ylab = "", ylim = range(0,15))
points(y_predict, col = "blue")
legend("right", c("real", "predicted"), pch = "sSvV", col = c("green", "blue"), trace = TRUE)
plot(test$score, col = "green", xlab = "", ylab = "", ylim = range(0,15))
points(y_predict, col = "blue")
legend("bottom", c("real", "predicted"), pch = "sSvV", col = c("green", "blue"), trace = TRUE)
plot(test$score, col = "green", xlab = "", ylab = "", ylim = range(0,15))
points(y_predict, col = "blue")
legend("bottom", c("real", "predicted"), pch = "o", col = c("green", "blue"), trace = TRUE)
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 1),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$age < 16),c("Dalc")], "score~age")
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$age > 16),c("Walc")], "score~age")
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$age > 15),c("Walc")], "score~age")
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$sex == "F"),c("freetime")], "score~age")
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$sex == "M"),c("freetime")], "score~age")
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$paid == "yes"),c("score")], "score~age")
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$paid == "yes"),c("score")], "score~paid")
normTest(students[(students$paid == "no"),c("score")], "score~paid")
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$paid == "yes"),c("score")], "score~paid_yes")
normTest(students[(students$paid == "no"),c("score")], "score~paid_no")
# school, sex, age, address, famsize, Pstatus, Medu, Fedu, Mjob, Fjob, reason, nursery, internet
# traveltime, studytime, failures, schoolsup, famsup, paid, activities, higher, romantic, famrel
# freetime, goout, Dalc, Walc, health, absences, subject
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$paid == "yes"),c("score")], "score~paid_yes")
normTest(students[(students$paid == "no"),c("score")], "score~paid_no")
normTest(students[(students$schoolsup == "yes"),c("score")], "score~paid_yes")
normTest(students[(students$schoolsup == "no"),c("score")], "score~paid_no")
# school, sex, age, address, famsize, Pstatus, Medu, Fedu, Mjob, Fjob, reason, nursery, internet
# traveltime, studytime, failures, schoolsup, famsup, paid, activities, higher, romantic, famrel
# freetime, goout, Dalc, Walc, health, absences, subject
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$paid == "yes"),c("score")], "score~paid_yes")
normTest(students[(students$paid == "no"),c("score")], "score~paid_no")
normTest(students[(students$schoolsup == "yes"),c("score")], "score~schoolsup_yes")
normTest(students[(students$schoolsup == "no"),c("score")], "score~schoolsup_no")
normTest(students[(students$Medu > 2),c("score")], "score~schoolsup_yes")
normTest(students[(students$Pedu > 2),c("score")], "score~schoolsup_no")
# school, sex, age, address, famsize, Pstatus, Medu, Fedu, Mjob, Fjob, reason, nursery, internet
# traveltime, studytime, failures, schoolsup, famsup, paid, activities, higher, romantic, famrel
# freetime, goout, Dalc, Walc, health, absences, subject
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$paid == "yes"),c("score")], "score~paid_yes")
normTest(students[(students$paid == "no"),c("score")], "score~paid_no")
normTest(students[(students$schoolsup == "yes"),c("score")], "score~schoolsup_yes")
normTest(students[(students$schoolsup == "no"),c("score")], "score~schoolsup_no")
normTest(students[(students$Medu > 2),c("score")], "score~schoolsup_yes")
normTest(students[(students$Pedu > 1),c("score")], "score~schoolsup_no")
# school, sex, age, address, famsize, Pstatus, Medu, Fedu, Mjob, Fjob, reason, nursery, internet
# traveltime, studytime, failures, schoolsup, famsup, paid, activities, higher, romantic, famrel
# freetime, goout, Dalc, Walc, health, absences, subject
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$paid == "yes"),c("score")], "score~paid_yes")
normTest(students[(students$paid == "no"),c("score")], "score~paid_no")
normTest(students[(students$schoolsup == "yes"),c("score")], "score~schoolsup_yes")
normTest(students[(students$schoolsup == "no"),c("score")], "score~schoolsup_no")
normTest(students[(students$Medu > 2),c("score")], "score~schoolsup_yes")
normTest(students[(students$Fedu > 2),c("score")], "score~schoolsup_no")
# school, sex, age, address, famsize, Pstatus, Medu, Fedu, Mjob, Fjob, reason, nursery, internet
# traveltime, studytime, failures, schoolsup, famsup, paid, activities, higher, romantic, famrel
# freetime, goout, Dalc, Walc, health, absences, subject
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$paid == "yes"),c("score")], "score~paid_yes")
normTest(students[(students$paid == "no"),c("score")], "score~paid_no")
normTest(students[(students$schoolsup == "yes"),c("score")], "score~schoolsup_yes")
normTest(students[(students$schoolsup == "no"),c("score")], "score~schoolsup_no")
normTest(students[(students$Medu > 3),c("score")], "score~schoolsup_yes")
normTest(students[(students$Fedu > 3),c("score")], "score~schoolsup_no")
# school, sex, age, address, famsize, Pstatus, Medu, Fedu, Mjob, Fjob, reason, nursery, internet
# traveltime, studytime, failures, schoolsup, famsup, paid, activities, higher, romantic, famrel
# freetime, goout, Dalc, Walc, health, absences, subject
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$paid == "yes"),c("score")], "score~paid_yes")
normTest(students[(students$paid == "no"),c("score")], "score~paid_no")
normTest(students[(students$schoolsup == "yes"),c("score")], "score~schoolsup_yes")
normTest(students[(students$schoolsup == "no"),c("score")], "score~schoolsup_no")
normTest(students[(students$Medu < 2),c("score")], "score~schoolsup_yes")
normTest(students[(students$Fedu < 2),c("score")], "score~schoolsup_no")
# school, sex, age, address, famsize, Pstatus, Medu, Fedu, Mjob, Fjob, reason, nursery, internet
# traveltime, studytime, failures, schoolsup, famsup, paid, activities, higher, romantic, famrel
# freetime, goout, Dalc, Walc, health, absences, subject
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$paid == "yes"),c("score")], "score~paid_yes")
normTest(students[(students$paid == "no"),c("score")], "score~paid_no")
normTest(students[(students$schoolsup == "yes"),c("score")], "score~schoolsup_yes")
normTest(students[(students$schoolsup == "no"),c("score")], "score~schoolsup_no")
normTest(students[(students$Medu < 3),c("score")], "score~schoolsup_yes")
normTest(students[(students$Fedu < 3),c("score")], "score~schoolsup_no")
# school, sex, age, address, famsize, Pstatus, Medu, Fedu, Mjob, Fjob, reason, nursery, internet
# traveltime, studytime, failures, schoolsup, famsup, paid, activities, higher, romantic, famrel
# freetime, goout, Dalc, Walc, health, absences, subject
normTest(students[(students$sex == "F"),c("goout")], "goout~sex")
normTest(students[(students$sex == "M"),c("goout")], "goout~sex")
normTest(students[(students$sex == "F"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "M"),c("Walc")], "Walc~sex")
normTest(students[(students$sex == "F"),c("score")], "score~sex")
normTest(students[(students$sex == "M"),c("score")], "score~sex")
normTest(students[(students$studytime > 2),c("score")], "score~studytime")
normTest(students[(students$age < 16),c("score")], "score~age")
normTest(students[(students$paid == "yes"),c("score")], "score~paid_yes")
normTest(students[(students$paid == "no"),c("score")], "score~paid_no")
normTest(students[(students$schoolsup == "yes"),c("score")], "score~schoolsup_yes")
normTest(students[(students$schoolsup == "no"),c("score")], "score~schoolsup_no")
normTest(students[(students$famsup == "yes"),c("score")], "score~famsup_yes")
normTest(students[(students$famsup == "no"),c("score")], "score~famsup_no")
# school, sex, age, address, famsize, Pstatus, Medu, Fedu, Mjob, Fjob, reason, nursery, internet
# traveltime, studytime, failures, schoolsup, famsup, paid, activities, higher, romantic, famrel
# freetime, goout, Dalc, Walc, health, absences, subject
# Agrupación por sexo de los estudiantes
students.male <- students[students$sex == "M",]
students.female <- students[students$sex == "F",]
# Agrupación por si reciben clases particules pagadas o no
students.paid <- students[students$paid == "yes",]
students.nopaid <- students[students$paid == "no",]
# Agrupación por si reciben soporte por parte de la familia
students.famsup <- students[students$famsup == "yes",]
students.nofamsup <- students[students$famsup == "no",]
# Agrupación por si reciben ayuda extra escolar
students.schoolsup <- students[students$schoolsup == "yes",]
students.noschoolsup <- students[students$schoolsup == "no",]
# Agrupación por tiempo dedicado al estudio
students.studytime <- students[students$studytime >= 3,]
students.nostudytime <- students[students$studytime < 3,]
# Agrupación por edad
students.mayores <- students[students$age >= 16,]
students.menores <- students[students$age < 16,]
# Agrupación por asignatura
students.port <- students[students$port == "yes",]
students.math <- students[students$math == "yes",]
normTest(students.female[,c("goout")], "goout~female")
normTest(students.male[,c("goout")], "goout~male")
normTest(students.female[,c("Walc")], "Walc~female")
normTest(students.male[,c("Walc")], "Walc~male")
normTest(students.female[,c("score")], "score~female")
normTest(students.male[,c("score")], "score~male")
normTest(students.studytime[,c("score")], "score~studytime")
normTest(students.nostudytime[,c("score")], "score~nostudytime")
normTest(students.mayores[,c("score")], "score~mayores")
normTest(students.menores[,c("score")], "score~menores")
normTest(students.paid[,c("score")], "score~paid")
normTest(students.nopaid[,c("score")], "score~nopaid")
normTest(students.schoolsup[,c("score")], "score~schoolsup")
normTest(students.noschoolsup[,c("score")], "score~noschoolsup")
normTest(students.famsup[,c("score")], "score~famsup")
normTest(students.nofamsup[,c("score")], "score~nofamsup")
fligner.test(score ~ age, data = students)
fligner.test(score ~ sex, data = students)
t.test(students.female$score, students.male$score, alternative = "less")
t.test(students.studytime$score, students.nostudytime$score, alternative = "less")
t.test(students.male$score, students.female$score, alternative = "less")
t.test(students.nostudytime$score, students.studytime$score, alternative = "less")
t.test(students.female$score, students.male$score, alternative = "less")
t.test(students.male$score, students.female$score, alternative = "less")
color=diverge_hcl(length(students$mark))[rank(students$mark)]
pairs(~ age + Medu + Fedu + traveltime + studytime + failures + famrel + G1 + G2 + G3 + score, data = students, pch = 19, cex = 0.5, lower.panel = NULL, col = color)
pairs(~ freetime + goout + Dalc + Walc + health + absences + G1 + G2 + G3 + score, data = students, pch = 19, cex = 0.5, lower.panel = NULL, col = color)
# Análisis de correlación
corr_matrix <- matrix(nc = 2, nr = 0)
colnames(corr_matrix) <- c("estimate", "p-value")
# Calcular el coeficiente de correlación para cada variable cuantitativa
# con respecto al campo "precio"
for (i in 1:(ncol(students))) {
if (colnames(students)[i] != "score") {
if (is.integer(students[,i]) | is.numeric(students[,i])) {
spearman_test = cor.test(students[,i],
students$score,
method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
corr_matrix <- rbind(corr_matrix, pair)
rownames(corr_matrix)[nrow(corr_matrix)] <- colnames(students)[i]
}
}
}
print(corr_matrix)

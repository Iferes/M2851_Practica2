g4 = ggplot(students,aes(x=sex, y=G3, color=studytime)) + geom_point(aes(size=G3))
g5 = ggplot(students,aes(x=age, y=G3, color=freetime)) + geom_point(aes(size=G3))
g4
g4 = ggplot(students,aes(x=sex, y=G3, color=studytime))
g5 = ggplot(students,aes(x=age, y=G3, color=freetime)) + geom_point(aes(size=G3))
g4
g4 = ggplot(students,aes(x=sex, y=G3, color=studytime)) + geom_point(aes(G3))
g5 = ggplot(students,aes(x=age, y=G3, color=freetime)) + geom_point(aes(size=G3))
g4
g4 = ggplot(students,aes(x=sex, y=G3, color=studytime)) + geom_point(aes(size=G3))
g5 = ggplot(students,aes(x=age, y=G3, color=freetime)) + geom_point(aes(size=G3))
g4
sMat=read.table("data/student-mat.csv",sep=",",header=TRUE)
sPor=read.table("data/student-por.csv",sep=",",header=TRUE)
sBoth=merge(sMat,sPor,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
print(nrow(sBoth)) # 382 students
#sMat$subject = "M"
#sPor$subject = "P"
#students = rbind(sMat,sPor)
#students$subject = as.factor(students$subject)
# school, sex, age, address, famsize, Pstatus, Medu, Fedu, Mjob, Fjob, reason, nursery, internet
# traveltime, studytime, failures, schoolsup, famsup, paid, activities, higher, romantic, famrel
# freetime, goout, Dalc, Walc, health, absences, subject
# Resumen
glimpse(sPor)
# Resumen
summary(students)
# Resumen
summary(sPor)
sMat=read.table("data/student-mat.csv",sep=",",header=TRUE)
sPor=read.table("data/student-por.csv",sep=",",header=TRUE)
sBoth=merge(sMat,sPor,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
print(nrow(sBoth)) # 382 students
students = sPor
#sMat$subject = "M"
#sPor$subject = "P"
#students = rbind(sMat,sPor)
#students$subject = as.factor(students$subject)
# school, sex, age, address, famsize, Pstatus, Medu, Fedu, Mjob, Fjob, reason, nursery, internet
# traveltime, studytime, failures, schoolsup, famsup, paid, activities, higher, romantic, famrel
# freetime, goout, Dalc, Walc, health, absences, subject
# Con datos nulos
colSums(is.na(students))
# Con datos ""
colSums(students=="")
# Con datos "?"
colSums(students=="?")
# Valores unicos
apply(students,2, function(x) length(unique(x)))
# Valores extremos
boxplot.stats(students$age)$out
boxplot.stats(students$traveltime)$out
boxplot.stats(students$studytime)$out
boxplot.stats(students$failures)$out
students$tipo = sapply(students, class)
boxplot(students[, c(school, sex, age, address, famsize, Pstatus, Medu, Fedu, Mjob, Fjob, reason, nursery, internet,
traveltime, studytime, failures, schoolsup, famsup, paid, activities, higher, romantic, famrel,
freetime, goout, Dalc, Walc, health, absences)])
boxplot(students[, c(address, famsize, Pstatus, Medu, Fedu, Mjob, Fjob, reason, nursery, internet,
traveltime, studytime, failures, schoolsup, famsup, paid, activities, higher, romantic, famrel,
freetime, goout, Dalc, Walc, health, absences)])
boxplot(students[, c("address", "famsize", Pstatus, Medu, Fedu, Mjob, Fjob, reason, nursery, internet,
traveltime, studytime, failures, schoolsup, famsup, paid, activities, higher, romantic, famrel,
freetime, goout, Dalc, Walc, health, absences)])
boxplot(students[, c("Age", "Medu", "Fedu", "traveltime", "studytime", "failures", "famrel",
"freetime", "goout", "Dalc", "Walc", "health", "absences")])
boxplot(students[, c("Age", "Medu", "Fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "Dalc", "Walc", "health", "absences")])
View(students)
boxplot(students[, c("age", "medu", "fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "Dalc", "Walc", "health", "absences")])
boxplot(students[, c("age", "medu", "fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "dalc", "walc", "health", "absences")])
boxplot(students[, c("age", "medu")])
boxplot(students[, c("age", "medu")])
boxplot(students[, c(age)])
boxplot(students[, c("age")])
#boxplot(students[, c("age", "medu", "fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "dalc", "walc", "health", "absences")])
boxplot(students[, c("age", "medu")])
boxplot(students[, c("age", "Medu")])
#boxplot(students[, c("age", "medu", "fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "dalc", "walc", "health", "absences")])
boxplot(students[, c("age", "Medu", "Fedu")])
#boxplot(students[, c("age", "medu", "fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "dalc", "walc", "health", "absences")])
boxplot(students[, c("age", "Medu", "Fedu", "traveltime", "studytime")])
#boxplot(students[, c("age", "medu", "fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "dalc", "walc", "health", "absences")])
boxplot(students[, c("age", "Medu", "Fedu", "traveltime", "studytime", "failures", "famrel")])
#boxplot(students[, c("age", "medu", "fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "dalc", "walc", "health", "absences")])
boxplot(students[, c("age", "Medu", "Fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout")])
#boxplot(students[, c("age", "medu", "fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "dalc", "walc", "health", "absences")])
boxplot(students[, c("age", "Medu", "Fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "dalc", "walc")])
boxplot(students[, c("age", "Medu", "Fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "Dalc", "Walc")])
#boxplot(students[, c("age", "medu", "fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "dalc", "walc", "health", "absences")])
boxplot(students[, c("age", "Medu", "Fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "Dalc", "Walc", "health", "absences")])
#boxplot(students[, c("age", "medu", "fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "dalc", "walc", "health", "absences")])
theme_angle45 <- theme(axis.text.x = element_text(face="bold", color="#993333", size=9, angle=45),
axis.text.y = element_text(face="bold", color="#993333", size=9, angle=0)) + theme_minimal()
boxplot(students[, c("age", "Medu", "Fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "Dalc", "Walc", "health", "absences")]) + theme_angle45
boxplot(students[, c("age", "Medu", "Fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "Dalc", "Walc", "health", "absences")], varwidth=TRUE)
boxplot(students[, c("age", "Medu", "Fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "Dalc", "Walc", "health", "absences")], varwidth=FALSE)
boxplot(students[, c("age", "Medu", "Fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "Dalc", "Walc", "health", "absences")], plot=FALSE)
boxplot(students[, c("age", "Medu", "Fedu", "traveltime", "studytime", "failures", "famrel", "freetime", "goout", "Dalc", "Walc", "health", "absences")])
knitr::opts_chunk$set(echo = TRUE)
wines=read.table("data/winequality-red.csv",sep=",",header=TRUE)
View(wines)
# Resumen
glimpse(data)
wines=read.table("data/winequality-red.csv",sep=",",header=TRUE)
data = wines
# Resumen
glimpse(data)
# Resumen
summary(data)
# Tipo de dato asignado a cada campo
sapply(data, class)
for(i in 1:ncol(data)) {
if (is.integer(data[,i])){
students[,i] = lapply(students[,i], as.numeric)
}
}
for(i in 1:ncol(data)) {
if (is.integer(data[,i])){
students[,i] = lapply(data[,i], as.numeric)
}
}
for(i in 1:ncol(data)) {
if (is.integer(data[,i])){
data[,i] = lapply(data[,i], as.numeric)
}
}
sapply(students,data)
for(i in 1:ncol(data)) {
if (is.integer(data[,i])){
data[,i] = lapply(data[,i], as.numeric)
}
}
sapply(data,class)
# Con datos nulos
colSums(is.na(data))
# Con datos ""
colSums(data=="")
# Con datos 0
colSums(data==0)
# Con datos nulos
colSums(is.na(data))
# Valores unicos
apply(data,2, function(x) length(unique(x)))
# Resumen
glimpse(data)
wines=read.table("data/winequality-red.csv",sep=",",header=TRUE)
data = wines
# Resumen
glimpse(data)
# Resumen
summary(data)
# Tipo de dato asignado a cada campo
sapply(data, class)
# Resumen
glimpse(data)
# Con datos 0
colSums(data==0)
# Con datos nulos
colSums(is.na(data))
# Valores unicos
apply(data,2, function(x) length(unique(x)))
# Valores extremos
boxplot(data)
# Valores extremos
par(mfrow=c(2,2))
boxplot(data$fixed.acidity)
boxplot(data$volatile.acidity)
boxplot(data$citric.acid)
boxplot(data$residual.sugar)
boxplot(data$chlorides)
boxplot(data$free.sulfur.dioxide)
boxplot(data$total.sulfur.dioxide)
boxplot(data$density)
boxplot(data$pH)
boxplot(data$sulphates)
boxplot(data$alcohol)
boxplot(data$quality)
# Valores extremos
par(mfrow=c(2,2))
boxplot(data$fixed.acidity)+title("fixed")
# Valores extremos
par(mfrow=c(2,2))
boxplot(data$fixed.acidity, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
boxplot(data$volatile.acidity)
boxplot(data$citric.acid)
boxplot(data$residual.sugar)
boxplot(data$chlorides)
boxplot(data$free.sulfur.dioxide)
boxplot(data$total.sulfur.dioxide)
boxplot(data$density)
boxplot(data$pH)
boxplot(data$sulphates)
boxplot(data$alcohol)
boxplot(data$quality)
# Valores extremos
par(mfrow=c(2,2))
boxplot(data$fixed.acidity, data=data, main="Car Milage Data", ylab="Miles Per Gallon")
boxplot(data$volatile.acidity)
boxplot(data$citric.acid)
boxplot(data$residual.sugar)
boxplot(data$chlorides)
boxplot(data$free.sulfur.dioxide)
boxplot(data$total.sulfur.dioxide)
boxplot(data$density)
boxplot(data$pH)
boxplot(data$sulphates)
boxplot(data$alcohol)
boxplot(data$quality)
# Valores extremos
par(mfrow=c(2,2))
boxplot(fixed.acidity, data=data, main="Car Milage Data", ylab="Miles Per Gallon")
# Valores extremos
par(mfrow=c(2,2))
boxplot(data$fixed.acidity, main="Car Milage Data", ylab="Miles Per Gallon")
boxplot(data$volatile.acidity)
boxplot(data$citric.acid)
boxplot(data$residual.sugar)
boxplot(data$chlorides)
boxplot(data$free.sulfur.dioxide)
boxplot(data$total.sulfur.dioxide)
boxplot(data$density)
boxplot(data$pH)
boxplot(data$sulphates)
boxplot(data$alcohol)
boxplot(data$quality)
# Valores extremos
par(mfrow=c(2,2))
col.names = colnames(students)
# Valores extremos
par(mfrow=c(2,2))
col.names = colnames(data)
for(i in 1:ncol(data)) {
boxplot(data[,i], ylab=col.names[i])
}
boxplot(data$fixed.acidity, main="Car Milage Data", ylab="Miles Per Gallon")
boxplot(data$volatile.acidity)
boxplot(data$citric.acid)
boxplot(data$residual.sugar)
boxplot(data$chlorides)
boxplot(data$free.sulfur.dioxide)
boxplot(data$total.sulfur.dioxide)
boxplot(data$density)
boxplot(data$pH)
boxplot(data$sulphates)
boxplot(data$alcohol)
boxplot(data$quality)
# Valores extremos
par(mfrow=c(2,2))
col.names = colnames(data)
for(i in 1:ncol(data)) {
boxplot(data[,i], main=col.names[i])
}
boxplot.stats(data$sulphates)$out
outliers = boxplot.stats(data$sulphates)$out
index = which( data$sulphates %in% outliers)
if(length(index)>0) {
data_clean=data[-index,]
}
outliers = boxplot.stats(data$sulphates)$out
index = which( data$sulphates %in% outliers)
if(length(index)>0) {
data=data[-index,]
}
par(mfrow=c(2,2))
for(i in 1:ncol(data)) {
if (is.numeric(data[,i])){
boxplot(data[,i], main = colnames(data)[i], width = 100)
}
}
library(nortest)
alpha = 0.05
col.names = colnames(data)
cat("No siguen una distribucion normal: \n")
for (i in 1:ncol(data)) {
if (is.integer(data[,i]) | is.numeric(data[,i])) {
ad_val = (ad.test(data[,i])$p.value < alpha)
ks_val = (ks.test(data[,i], pnorm, mean(data[,i]), sd(data[,i]))$p.value < alpha)
sh_val = (shapiro.test(data[,i])$p.value < alpha)
cat(col.names[i])
cat("\t")
cat(ad_val,ks_val,sh_val,"\t")
cat("\n")
}
}
outliers = boxplot.stats(data$sulphates)$out
index = which( data$sulphates %in% outliers)
if(length(index)>0) {
data=data[-index,]
}
for(i in 1:ncol(data)) {
if (is.numeric(data[,i])){
outliers = boxplot.stats(data[,i])$out
index = which( data[,i] %in% outliers)
if(length(index)>0) {
data=data[-index,]
}
}
}
par(mfrow=c(2,2))
for(i in 1:ncol(data)) {
if (is.numeric(data[,i])){
boxplot(data[,i], main = colnames(data)[i], width = 100)
}
}
library(nortest)
alpha = 0.05
col.names = colnames(data)
cat("No siguen una distribucion normal: \n")
for (i in 1:ncol(data)) {
if (is.integer(data[,i]) | is.numeric(data[,i])) {
ad_val = (ad.test(data[,i])$p.value < alpha)
ks_val = (ks.test(data[,i], pnorm, mean(data[,i]), sd(data[,i]))$p.value < alpha)
sh_val = (shapiro.test(data[,i])$p.value < alpha)
cat(col.names[i])
cat("\t")
cat(ad_val,ks_val,sh_val,"\t")
cat("\n")
}
}
par(mfrow=c(2,2))
for(i in 1:ncol(data)) {
if (is.numeric(data[,i])){
qqnorm(data[,i],main = paste("Normal Q-Q Plot for ",colnames(data)[i]))
qqline(data[,i],col="red")
hist(students[,i],
main=paste("Histogram for ", colnames(data)[i]),
xlab=colnames(data)[i], freq = FALSE)
}
}
par(mfrow=c(2,2))
for(i in 1:ncol(data)) {
if (is.numeric(data[,i])){
qqnorm(data[,i],main = paste("Normal Q-Q Plot for ",colnames(data)[i]))
qqline(data[,i],col="red")
hist(data[,i],
main=paste("Histogram for ", colnames(data)[i]),
xlab=colnames(data)[i], freq = FALSE)
}
}
# Análisis de correlación
corr_matrix <- matrix(nc = 2, nr = 0)
colnames(corr_matrix) <- c("estimate", "p-value")
# Calcular el coeficiente de correlación para cada variable cuantitativa
# con respecto al campo "precio"
for (i in 1:(ncol(data) - 4)) {
if (is.integer(data[,i]) | is.numeric(data[,i])) {
spearman_test = cor.test(data[,i],
data[,length(data) -  1],
method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
corr_matrix <- rbind(corr_matrix, pair)
rownames(corr_matrix)[nrow(corr_matrix)] <- colnames(data)[i]
}
}
print(corr_matrix)
# Análisis de correlación
corr_matrix <- matrix(nc = 2, nr = 0)
colnames(corr_matrix) <- c("estimate", "p-value")
# Calcular el coeficiente de correlación para cada variable cuantitativa
# con respecto al campo "precio"
for (i in 1:(ncol(data) - 4)) {
if (is.double(data[,i]) | is.numeric(data[,i])) {
spearman_test = cor.test(data[,i],
data[,length(data) -  1],
method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
corr_matrix <- rbind(corr_matrix, pair)
rownames(corr_matrix)[nrow(corr_matrix)] <- colnames(data)[i]
}
}
print(corr_matrix)
# Análisis de correlación
corr_matrix <- matrix(nc = 2, nr = 0)
colnames(corr_matrix) <- c("estimate", "p-value")
# Calcular el coeficiente de correlación para cada variable cuantitativa
# con respecto al campo "quality"
for (i in 1:(ncol(data) - 4)) {
if (is.double(data[,i]) | is.numeric(data[,i])) {
spearman_test = cor.test(data[,i],
data[,length(data) -  1],
method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
corr_matrix <- rbind(corr_matrix, pair)
rownames(corr_matrix)[nrow(corr_matrix)] <- colnames(data)[i]
}
}
print(corr_matrix)
# Análisis de correlación
corr_matrix <- matrix(nc = 2, nr = 0)
colnames(corr_matrix) <- c("estimate", "p-value")
# Calcular el coeficiente de correlación para cada variable cuantitativa
# con respecto al campo "quality"
for (i in 1:(ncol(data) - 4)) {
if (is.double(data[,i]) | is.numeric(data[,i])) {
spearman_test = cor.test(data[,i],
data[,length(data)],
method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
corr_matrix <- rbind(corr_matrix, pair)
rownames(corr_matrix)[nrow(corr_matrix)] <- colnames(data)[i]
}
}
print(corr_matrix)
# Análisis de correlación
corr_matrix <- matrix(nc = 2, nr = 0)
colnames(corr_matrix) <- c("estimate", "p-value")
# Calcular el coeficiente de correlación para cada variable cuantitativa
# con respecto al campo "quality"
for (i in 1:(ncol(data) - 1)) {
if (is.double(data[,i]) | is.numeric(data[,i])) {
spearman_test = cor.test(data[,i],
data$quality,
method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
corr_matrix <- rbind(corr_matrix, pair)
rownames(corr_matrix)[nrow(corr_matrix)] <- colnames(data)[i]
}
}
print(corr_matrix)
# Análisis de correlación
corr_matrix <- matrix(nc = 2, nr = 0)
colnames(corr_matrix) <- c("estimate", "p-value")
# Calcular el coeficiente de correlación para cada variable cuantitativa
# con respecto al campo "quality"
for (i in 1:(ncol(data) - 1)) {
if (is.double(data[,i]) | is.numeric(data[,i])) {
spearman_test = cor.test(data[,i],
data[,length(data)],
method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
corr_matrix <- rbind(corr_matrix, pair)
rownames(corr_matrix)[nrow(corr_matrix)] <- colnames(data)[i]
}
}
print(corr_matrix)
smp_siz = floor(0.75*nrow(data))
set.seed(123)   # set seed to ensure you always have same random numbers generated
train_ind = sample(seq_len(nrow(data)),size = smp_siz)  # Randomly identifies therows equal to sample size ( defined in previous instruction) from  all the rows of Smarket dataset and stores the row number in train_ind
train = data[train_ind,] #creates the training dataset with row numbers stored in train_ind
test = data[-train_ind,]  # creates the test dataset excluding the row numbers mentioned in train_ind
# Generación de varios modelos
modelo1 <- lm(quality ~ sulphates + alcohol, data = train)
modelo2 <- lm(quality ~ sulphates + alcohol + fixed.acidity + residual.sugar, data = train)
modelo3 <- lm(quality ~ sulphates + alcohol + volatile.acidit, data = train)
# Generación de varios modelos
modelo1 <- lm(quality ~ sulphates + alcohol, data = train)
modelo2 <- lm(quality ~ sulphates + alcohol + fixed.acidity + residual.sugar, data = train)
modelo3 <- lm(quality ~ sulphates + alcohol + volatile.acidity, data = train)
modelo4 <- lm(quality ~ sulphates + alcohol + free.sulfur.dioxide, data = train)
modelo5 <- lm(quality ~ sulphates + alcohol + pH, data = train)
tabla.coeficientes <- matrix(
c(1, summary(modelo1)$r.squared,
2, summary(modelo2)$r.squared,
3, summary(modelo3)$r.squared,
4, summary(modelo4)$r.squared,
5, summary(modelo5)$r.squared),
ncol = 2, byrow = TRUE)
colnames(tabla.coeficientes) <- c("Modelo", "R^2")
tabla.coeficientes
# Predecir el precio
predict(modelo1, test)
# Predecir el precio
y_pred = predict(modelo1, test)
# Predecir el precio
y_pred = predict(modelo1, test)
table(y_pred)
View(data)
color=diverge_hcl(length(data$quality))[rank(data$quality)]
pairs(~ sulphates + alcohol + fixed.acidity + residual.sugar, data = data, pch = 19, cex = 0.5, lower.panel = NULL, col = color)
color=diverge_hcl(length(data$quality))[rank(data$quality)]
pairs(~data, data = data, pch = 19, cex = 0.5, lower.panel = NULL, col = color)
color=diverge_hcl(length(data$quality))[rank(data$quality)]
pairs(data, data = data, pch = 19, cex = 0.5, lower.panel = NULL, col = color)
color=diverge_hcl(length(data$quality))[rank(data$quality)]
pairs(~ sulphates + alcohol + fixed.acidity + residual.sugar, data = data, pch = 19, cex = 0.5, lower.panel = NULL, col = color)
color=diverge_hcl(length(data$quality))[rank(data$quality)]
pairs(~ sulphates + alcohol + fixed.acidity + residual.sugar + density + pH, data = data, pch = 19, cex = 0.5, lower.panel = NULL, col = color)
color=diverge_hcl(length(data$quality))[rank(data$quality)]
pairs(~ sulphates + alcohol + fixed.acidity + residual.sugar + density + pH + quality, data = data, pch = 19, cex = 0.5, lower.panel = NULL, col = color)
color=diverge_hcl(length(data$quality))[rank(data$quality)]
pairs(~ sulphates + alcohol + fixed.acidity + residual.sugar + density + pH, data = data, pch = 19, cex = 0.5, lower.panel = NULL, col = color)
